import { Message } from "node-telegram-bot-api";
import bot from "../servises/telefram-service";
import db from "../servises/mongo-service";
import { getRandom } from "../utils";
import { ForesightDto } from "../dtos";

class BotController {
	waitForReply: {
		[key: number]: "hour";
	};

	constructor() {
		bot.setMyCommands([
			{ command: "/start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
			{ command: "/foresight", description: "–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è" },
			{ command: "/subscribe", description: "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è / –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
			{ command: "/silent", description: "–ë–µ–∑ –∑–≤—É–∫—É / –ó—ñ –∑–≤—É–∫–æ–º" },
			{ command: "/hour", description: "–ó–º—ñ–Ω–∏—Ç–∏ –≥–æ–¥–∏–Ω—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è" },
		]);
		this.waitForReply = {};
	}

	static async sendError(chatId: number) {
		await bot.sendMessage(chatId, `–ü–æ–º–∏–ª–æ—á–∫–∞  ¬Ø\\_(„ÉÑ)_/¬Ø`);
	}

	async onMessage(msg: Message) {
		const {
			text,
			chat: { id: chatId },
		} = msg;

		//start bot
		if (text === "/start") {
			try {
				await db.connect();
				try {
					await db.addChat(chatId);

					await bot.sendMessage(
						chatId,
						`–í—ñ—Ç–∞—é, –í–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è.\n\n–í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ *–æ–¥–Ω–µ* –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å (–æ 12:00).\n\n–í–∏ –º–æ–∂–µ—Ç–µ *–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è* –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å.\n\n–í–∏ –º–æ–∂–µ—Ç–µ *–∑–∞–ø—Ä–æ—Å–∏—Ç–∏* –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è —Ä–∞–Ω—ñ—à–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ–≥–æ —á–∞—Å—É.\n\n–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è *–±–µ–∑ –∑–≤—É–∫—É –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è*.\n\n–í–∏ –º–æ–∂–µ—Ç–µ *–∑–º—ñ–Ω–∏—Ç–∏ –≥–æ–¥–∏–Ω—É* –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å.\n\n–û—Å—å –≤–∞—à–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:`,
						{
							parse_mode: "Markdown",
						},
					);

					//trigger first foresight
					try {
						await this.onMessage({
							text: "/foresight",
							chat: {
								id: chatId,
								type: "private",
							},
						} as Message);
					} catch (e) {
						console.error(e);
					}
				} catch (e) {
					try {
						await db.getChat(chatId);
						await db.chatSubscribe(chatId, true);
						return await bot.sendMessage(
							chatId,
							`–Ø –≤–∂–µ –∑–Ω–∞—é –ø—Ä–æ –≤–∞—Å –≤—Å–µ. –í–∏ –∑–Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è.`,
							{
								parse_mode: "Markdown",
							},
						);
					} catch (e) {
						await BotController.sendError(chatId);
					}
				}
			} catch (e) {
				await BotController.sendError(chatId);
			}
		}

		//get foresight
		if (text === "/foresight") {
			const dateNow = new Date(Date.now() + 120 * 60 * 1000).setUTCHours(
				0,
				0,
				0,
				0,
			);

			try {
				await db.connect();
				try {
					const { lastReceivedDate: chatDate, received } = await db.getChat(
						chatId,
					);

					const isAlreadyReceived =
						chatDate && dateNow - new Date(chatDate).getTime() < 86400000;
					if (isAlreadyReceived) {
						return await bot.sendMessage(
							chatId,
							"üö´ –û–¥–∏–Ω –¥–µ–Ω—å - –æ–¥–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è.",
						);
					}

					const foresights = await db.getForesights();

					const notReceivedForesights = foresights.filter(
						(foresight) => !received.includes(foresight.id),
					);

					let foresight: ForesightDto;
					if (!notReceivedForesights.length) {
						foresight = foresights[getRandom(foresights.length)];
						await db.updateChatReceived(chatId, foresight.id, true);
					} else {
						foresight =
							notReceivedForesights[getRandom(notReceivedForesights.length)];
						await db.updateChatReceived(chatId, foresight.id, false);
					}

					return await bot.sendMessage(chatId, `ü•† ${foresight.text}`);
				} catch (e) {
					await BotController.sendError(chatId);
				}
			} catch (e) {
				await BotController.sendError(chatId);
			}
		}

		//change subscribe
		if (text === "/subscribe") {
			try {
				await db.connect();
				try {
					const { subscribed } = await db.getChat(chatId);
					const newSub = !subscribed;

					await db.chatSubscribe(chatId, newSub);

					return await bot.sendMessage(
						chatId,
						newSub
							? "–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è."
							: `–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å. –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤ "–ú–µ–Ω—é", –∞–ª–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å.`,
						{
							parse_mode: "Markdown",
						},
					);
				} catch (e) {
					await BotController.sendError(chatId);
				}
			} catch (e) {
				await BotController.sendError(chatId);
			}
		}

		//change message silent
		if (text === "/silent") {
			try {
				await db.connect();
				try {
					const { silent } = await db.getChat(chatId);
					const newSilent = !silent;

					await db.chatSilent(chatId, newSilent);

					return await bot.sendMessage(
						chatId,
						newSilent
							? "üîá –í–∞—à—ñ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –±–µ–∑ –∑–≤—É–∫—É."
							: "üîà –í–∞—à—ñ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∑—ñ –∑–≤—É–∫–æ–º.",
						{
							parse_mode: "Markdown",
						},
					);
				} catch (e) {
					await BotController.sendError(chatId);
				}
			} catch (e) {
				await BotController.sendError(chatId);
			}
		}

		//change time
		if (text === "/hour") {
			const timePrompt = await bot.sendMessage(
				chatId,
				"–î–æ–±—Ä–µ, –≤–≤–µ–¥—ñ—Ç—å –≥–æ–¥–∏–Ω—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥ 0 –¥–æ 23 –∑–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º",
				{
					parse_mode: "Markdown",
					reply_markup: {
						force_reply: true,
					},
				},
			);
			return (this.waitForReply[chatId] = "hour");
		}

		//reply
		if (this.waitForReply[chatId] === "hour") {
			const hour = Math.floor(Number(text));
			if (hour < 0 || hour > 23) {
				return await BotController.sendError(chatId);
			}

			try {
				await db.connect();
				try {
					await db.chatReceiveHour(chatId, hour);
					delete this.waitForReply[chatId];
					return await bot.sendMessage(
						chatId,
						`–ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${hour}:00 –∑–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º`,
						{
							parse_mode: "Markdown",
						},
					);
				} catch (e) {
					await BotController.sendError(chatId);
				}
			} catch (e) {
				await BotController.sendError(chatId);
			}
		}
	}

	async foresightForAll() {
		const dateNow = new Date(Date.now() + 120 * 60 * 1000);
		const currentHour = dateNow.getHours();
		const beginDateTime = dateNow.setUTCHours(0, 0, 0, 0);

		try {
			await db.connect();
			try {
				const chats = await db.getChats({
					subscribed: true,
					receiveHour: currentHour,
				});

				const notReceivedChats = chats.filter(
					({ lastReceivedDate }) =>
						!(
							lastReceivedDate &&
							beginDateTime - new Date(lastReceivedDate).getTime() < 86400000
						),
				);

				if (!notReceivedChats.length) {
					return;
				}

				const foresights = await db.getForesights();

				await Promise.all(
					notReceivedChats.map(
						async ({ id, lastReceivedDate, silent, received }) => {
							const isAlreadyReceived =
								lastReceivedDate &&
								beginDateTime - new Date(lastReceivedDate).getTime() < 86400000;
							if (isAlreadyReceived) return;

							const notReceivedForesights = foresights.filter(
								(foresight) => !received.includes(foresight.id),
							);

							let foresight: ForesightDto;
							if (!notReceivedForesights.length) {
								foresight = foresights[getRandom(foresights.length)];
								await db.updateChatReceived(id, foresight.id, true);
							} else {
								foresight =
									notReceivedForesights[
										getRandom(notReceivedForesights.length)
									];
								await db.updateChatReceived(id, foresight.id, false);
							}

							try {
								await bot.sendMessage(id, `ü•† ${foresight.text}`, {
									disable_notification: silent,
								});
							} catch (e) {
								// @ts-ignore
								if (e.response.body.error_code === 403) {
									await db.chatSubscribe(id, false);
								}
							}
						},
					),
				);
			} catch (e) {}
		} catch (e) {}
	}
}

export default new BotController();
