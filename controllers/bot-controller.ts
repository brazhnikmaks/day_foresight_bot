import { Message } from "node-telegram-bot-api";
import bot from "../servises/telefram-service";
import db from "../servises/mongo-service";
import { getRandom } from "../utils";
import { ChatDto, ForesightDto } from "../dtos";

class BotController {
	waitForReply: {
		[key: number]: "hour";
	};

	constructor() {
		this.setCommands();
		this.waitForReply = {};
	}

	async setCommands() {
		bot.setMyCommands([
			{ command: "/foresight", description: "ü•† –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è" },
			{ command: "/subscribe", description: "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
			{ command: "/unsubscribe", description: "üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
			{ command: "/mute", description: "üîá –ë–µ–∑ –∑–≤—É–∫—É" },
			{ command: "/unmute", description: "üîà –ó—ñ –∑–≤—É–∫–æ–º" },
			{ command: "/hour", description: "üïõ –ì–æ–¥–∏–Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è" },
		]);
	}

	async sendError(chatId: number) {
		await bot.sendMessage(chatId, `–ü–æ–º–∏–ª–æ—á–∫–∞  ¬Ø\\_(„ÉÑ)_/¬Ø`);
	}

	async addLog(chat: ChatDto, action: string, message: string) {
		const { firstName, lastName, username, id } = chat;
		await db.addLog(
			firstName
				? `${firstName}${lastName ? ` ${lastName}` : ""}`
				: id.toString(),
			action,
			message,
			username,
		);
	}

	async onHelp(chatId: number) {
		let hour = 12;
		try {
			const chat = await db.getChat(chatId);
			hour = chat.receiveHour;
		} catch (e) {}

		return await bot.sendMessage(
			chatId,
			`–í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ *–æ–¥–Ω–µ* –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å (–æ ${hour}:00 –∑–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º).\n\n/foresight - ü•† –í–∏ –º–æ–∂–µ—Ç–µ *–∑–∞–ø—Ä–æ—Å–∏—Ç–∏* –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è —Ä–∞–Ω—ñ—à–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ–≥–æ —á–∞—Å—É (–∞–ª–µ —è–∫—â–æ —â–µ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏)\n\n/unsubscribe - üîï –í–∏ –º–æ–∂–µ—Ç–µ *–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è* –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å.\n/subscribe - üîî –í–∏ –º–æ–∂–µ—Ç–µ *–≤—ñ–¥–Ω–æ–≤–∏—Ç–∏* –ø—ñ–¥–ø–∏—Å–∫—É.\n\n/mute - üîá –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è *–±–µ–∑ –∑–≤—É–∫—É –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è*.\n/unmute - üîà —Ç–∞ *–∑—ñ –∑–≤—É–∫–æ–º*.\n\n/hour - üïõ –í–∏ –º–æ–∂–µ—Ç–µ *–∑–º—ñ–Ω–∏—Ç–∏ –≥–æ–¥–∏–Ω—É* –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å.`,
			{
				parse_mode: "Markdown",
			},
		);
	}

	async onStart(msg: Message) {
		const {
			chat: { id: chatId },
			from,
		} = msg;

		try {
			const chat = await db.addChat(chatId, from);

			await bot.sendMessage(
				chatId,
				`–í—ñ—Ç–∞—é, –í–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è.`,
			);

			await this.onHelp(chatId);

			await bot.sendMessage(chatId, `–û—Å—å –≤–∞—à–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:`);

			//trigger first foresight
			try {
				await this.onForesight({
					text: "/foresight",
					chat: {
						id: chatId,
						type: "private",
					},
				} as Message);

				return;
			} catch (e) {
				console.error(e);
			}

			await this.setCommands();

			//log
			await this.addLog(chat, "/start", "–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –±–æ—Ç–∞");
		} catch (e) {
			try {
				const { subscribed } = await db.getChat(chatId);
				if (subscribed) {
					await bot.sendMessage(
						chatId,
						`–Ø –≤–∂–µ –∑–Ω–∞—é –ø—Ä–æ –≤–∞—Å –≤—Å–µ. –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è.`,
					);
					await this.setCommands();
				} else {
					await db.chatSubscribe(chatId, true);
					await bot.sendMessage(
						chatId,
						`–Ø –≤–∂–µ –∑–Ω–∞—é –ø—Ä–æ –≤–∞—Å –≤—Å–µ. –í–∏ –∑–Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è.`,
					);
					await this.setCommands();
				}
			} catch (e) {
				await this.sendError(chatId);
			}
		}
	}

	async onForesight(msg: Message) {
		const {
			chat: { id: chatId },
		} = msg;

		const dateNow = new Date(Date.now() + 120 * 60 * 1000).setUTCHours(
			0,
			0,
			0,
			0,
		);

		try {
			const chat = await db.getChat(chatId);
			const { lastReceivedDate: chatDate, received } = chat;

			const isAlreadyReceived =
				chatDate && dateNow - new Date(chatDate).getTime() < 86400000;
			if (isAlreadyReceived) {
				return await bot.sendMessage(
					chatId,
					"üö´ –û–¥–∏–Ω –¥–µ–Ω—å - –æ–¥–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è.",
				);
			}

			const foresights = await db.getForesights();

			const notReceivedForesights = foresights.filter(
				(foresight) => !received.includes(foresight.id),
			);

			//log
			let foresight: ForesightDto;

			if (!notReceivedForesights.length) {
				foresight = foresights[getRandom(foresights.length)];
				await db.updateChatReceived(chatId, foresight.id, true);
			} else {
				foresight =
					notReceivedForesights[getRandom(notReceivedForesights.length)];
				await db.updateChatReceived(chatId, foresight.id, false);
			}

			await bot.sendMessage(chatId, `ü•† ${foresight.text}`);

			//log
			await this.addLog(chat, "/foresight", foresight.text);
		} catch (e) {
			await this.sendError(chatId);
		}
	}

	async onSubscribe(msg: Message, subscribe: boolean) {
		const {
			chat: { id: chatId },
		} = msg;

		try {
			const chat = await db.getChat(chatId);

			if (chat.subscribed === subscribe) {
				return await bot.sendMessage(
					chatId,
					subscribe
						? "üîî –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è."
						: "üîï –í–∏ –≤–∂–µ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å",
				);
			}

			await db.chatSubscribe(chatId, subscribe);

			await bot.sendMessage(
				chatId,
				subscribe
					? "üîî –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è."
					: `üîï –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å. –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤ "–ú–µ–Ω—é", –∞–ª–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å.`,
			);

			//log
			await this.addLog(
				chat,
				subscribe ? "/subscribe" : "/unsubscribe",
				subscribe ? "–ü—ñ–¥–ø–∏—Å–∞–≤—Å—è" : "–í—ñ–¥–ø–∏—Å–∞–≤—Å—è",
			);

			return;
		} catch (e) {
			await this.sendError(chatId);
		}
	}

	async onMute(msg: Message, mute: boolean) {
		const {
			chat: { id: chatId },
		} = msg;

		try {
			const chat = await db.getChat(chatId);

			if (chat.silent === mute) {
				return await bot.sendMessage(
					chatId,
					mute
						? "üîá –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –±–µ–∑ –∑–≤—É–∫—É"
						: "üîà –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –∑—ñ –∑–≤—É–∫–æ–º",
				);
			}

			await db.chatSilent(chatId, mute);

			await bot.sendMessage(
				chatId,
				mute
					? "üîá –í–∞—à—ñ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –±–µ–∑ –∑–≤—É–∫—É."
					: "üîà –í–∞—à—ñ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∑—ñ –∑–≤—É–∫–æ–º.",
			);

			//log
			await this.addLog(
				chat,
				mute ? "/mute" : "/unmute",
				mute ? "–ü—Ä–∏–±—Ä–∞–≤ –∑–≤—É–∫" : "–ü–æ–≤–µ—Ä–Ω—É–≤ –∑–≤—É–∫",
			);

			return;
		} catch (e) {
			await this.sendError(chatId);
		}
	}

	async onHour(msg: Message) {
		const {
			chat: { id: chatId },
		} = msg;

		await bot.sendMessage(
			chatId,
			"–î–æ–±—Ä–µ, –≤–≤–µ–¥—ñ—Ç—å –≥–æ–¥–∏–Ω—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥ 0 –¥–æ 23 –∑–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º",
			{
				parse_mode: "Markdown",
				reply_markup: {
					force_reply: true,
				},
			},
		);
		this.waitForReply[chatId] = "hour";
		return;
	}

	async onHourReply(msg: Message) {
		const {
			text,
			chat: { id: chatId },
		} = msg;

		const hour = Math.floor(Number(text));
		if (hour < 0 || hour > 23) {
			return await this.sendError(chatId);
		}

		try {
			const chat = await db.chatReceiveHour(chatId, hour);

			delete this.waitForReply[chatId];
			await bot.sendMessage(
				chatId,
				`–ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${hour}:00 –∑–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º`,
			);

			//log
			await this.addLog(chat, "/hour", `–ù–æ–≤–∏–π —á–∞—Å –æ–ø–æ–≤—ñ—â–µ–Ω—å: ${hour}:00`);

			return;
		} catch (e) {
			await this.sendError(chatId);
		}
	}

	async onAction(msg: Message) {
		const {
			text,
			chat: { id: chatId },
		} = msg;

		try {
			await db.connect();
			switch (text) {
				//start bot
				case "/start":
					await this.onStart(msg);
					return;
				//get foresight
				case "/foresight":
					await this.onForesight(msg);
					return;
				//subscribe
				case "/subscribe":
					await this.onSubscribe(msg, true);
					return;
				//unsubscribe
				case "/unsubscribe":
					await this.onSubscribe(msg, false);
					return;
				//mute
				case "/mute":
					await this.onMute(msg, true);
					return;
				//unmute
				case "/unmute":
					await this.onMute(msg, false);
					return;
				//chanhe hour
				case "/hour":
					await this.onHour(msg);
					return;
				//wait reply
				case "/hour":
					await this.onHour(msg);
					return;
				default:
					if (this.waitForReply[chatId] === "hour") {
						await this.onHourReply(msg);
						return;
					}
					await this.onHelp(chatId);
					return;
			}
		} catch (e) {
			this.sendError(chatId);
		}
	}

	async foresightForAll() {
		const dateNow = new Date(Date.now() + 120 * 60 * 1000);
		const currentHour = dateNow.getHours();
		const beginDateTime = dateNow.setUTCHours(0, 0, 0, 0);

		try {
			await db.connect();
			try {
				const chats = await db.getChats({
					subscribed: true,
					receiveHour: currentHour,
				});

				const notReceivedChats = chats.filter(
					({ lastReceivedDate }) =>
						!(
							lastReceivedDate &&
							beginDateTime - new Date(lastReceivedDate).getTime() < 86400000
						),
				);

				if (!notReceivedChats.length) {
					return;
				}

				const foresights = await db.getForesights();

				//log
				let logMessage: string = "";

				await Promise.all(
					notReceivedChats.map(
						async (
							{ id, lastReceivedDate, silent, received, firstName, lastName },
							index,
						) => {
							const isAlreadyReceived =
								lastReceivedDate &&
								beginDateTime - new Date(lastReceivedDate).getTime() < 86400000;
							if (isAlreadyReceived) return;

							const notReceivedForesights = foresights.filter(
								(foresight) => !received.includes(foresight.id),
							);

							let foresight: ForesightDto;
							if (!notReceivedForesights.length) {
								foresight = foresights[getRandom(foresights.length)];
								await db.updateChatReceived(id, foresight.id, true);
							} else {
								foresight =
									notReceivedForesights[
										getRandom(notReceivedForesights.length)
									];
								await db.updateChatReceived(id, foresight.id, false);
							}

							try {
								await bot.sendMessage(id, `ü•† ${foresight.text}`, {
									disable_notification: silent,
								});

								//log
								logMessage += `${index > 0 ? "\n" : ""}${
									firstName
										? `${firstName}${lastName ? ` ${lastName}` : ""}`
										: id.toString()
								}: ${foresight.text}`;
							} catch (e) {
								// @ts-ignore
								if (e.response.body.error_code === 403) {
									await db.chatSubscribe(id, false);
								}
							}
						},
					),
				);

				//log
				await this.addLog(
					{
						firstName: "bot",
						username: "day_foresight_bot",
					} as ChatDto,
					"hour shedule",
					logMessage,
				);

				return;
			} catch (e) {}
		} catch (e) {}
	}
}

export default new BotController();
